using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using PdfiumViewer;
using SkiaSharp;

namespace PdfToPngExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // File paths
            string pdfFilePath = "path_to_your_pdf.pdf";
            string outputFilePathOriginal = "output_page.png";
            string outputFilePathRotated = "output_page_rotated.png";

            try
            {
                // Convert the first page of the PDF to PNG
                using (var pdfDocument = PdfDocument.Load(pdfFilePath))
                using (var pdfPage = pdfDocument.Render(0, 300, 300, true))
                {
                    // Save the original PNG
                    pdfPage.Save(outputFilePathOriginal, ImageFormat.Png);

                    // Rotate the PNG by 90 degrees and save
                    using (var bitmap = ConvertToSkBitmap(pdfPage))
                    using (var rotatedBitmap = RotateBitmap(bitmap, 90))
                    using (var image = SKImage.FromBitmap(rotatedBitmap))
                    using (var data = image.Encode(SKEncodedImageFormat.Png, 100))
                    using (var stream = File.OpenWrite(outputFilePathRotated))
                    {
                        data.SaveTo(stream);
                    }

                    Console.WriteLine("Images saved successfully.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An error occurred: " + ex.Message);
            }
        }

        private static SKBitmap ConvertToSkBitmap(Bitmap bitmap)
        {
            using (var ms = new MemoryStream())
            {
                bitmap.Save(ms, ImageFormat.Png);
                ms.Seek(0, SeekOrigin.Begin);
                return SKBitmap.Decode(ms);
            }
        }

        private static SKBitmap RotateBitmap(SKBitmap originalBitmap, float degrees)
        {
            var rotatedBitmap = new SKBitmap(originalBitmap.Height, originalBitmap.Width);

            using (var canvas = new SKCanvas(rotatedBitmap))
            {
                canvas.Translate(rotatedBitmap.Width / 2, rotatedBitmap.Height / 2);
                canvas.RotateDegrees(degrees);
                canvas.Translate(-originalBitmap.Width / 2, -originalBitmap.Height / 2);
                canvas.DrawBitmap(originalBitmap, 0, 0);
            }

            return rotatedBitmap;
        }
    }
}
