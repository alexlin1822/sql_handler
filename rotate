using System;
using System.IO;
using SkiaSharp;

namespace RotateCanvasExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // File paths
            string inputFilePath = "path_to_your_input_image.png";
            string outputFilePathOriginal = "output_image.png";
            string outputFilePathRotated = "output_image_rotated.png";

            try
            {
                // Load the image
                using (var originalBitmap = SKBitmap.Decode(inputFilePath))
                {
                    // Convert to 8-bit and save the original PNG
                    using (var skBitmap8bpp = ConvertTo8bpp(originalBitmap))
                    {
                        SaveBitmap(skBitmap8bpp, outputFilePathOriginal);

                        // Rotate the PNG by 90 degrees and save
                        using (var rotatedBitmap8bpp = RotateCanvas(skBitmap8bpp, 90))
                        {
                            SaveBitmap(rotatedBitmap8bpp, outputFilePathRotated);
                        }
                    }

                    Console.WriteLine("Images saved successfully.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An error occurred: " + ex.Message);
            }
        }

        private static SKBitmap ConvertTo8bpp(SKBitmap bitmap)
        {
            int width = bitmap.Width;
            int height = bitmap.Height;

            // Create a new SKBitmap with Gray8 color type
            SKBitmap skBitmap8bpp = new SKBitmap(width, height, SKColorType.Gray8, SKAlphaType.Opaque);

            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    SKColor color = bitmap.GetPixel(x, y);
                    byte grayValue = (byte)((color.Red + color.Green + color.Blue) / 3);
                    skBitmap8bpp.SetPixel(x, y, new SKColor(grayValue, grayValue, grayValue));
                }
            }

            return skBitmap8bpp;
        }

        private static SKBitmap RotateCanvas(SKBitmap bitmap, float degrees)
        {
            int width = bitmap.Width;
            int height = bitmap.Height;

            // Create a new SKBitmap with swapped dimensions
            SKBitmap rotatedBitmap = new SKBitmap(height, width, SKColorType.Gray8, SKAlphaType.Opaque);

            using (var canvas = new SKCanvas(rotatedBitmap))
            {
                // Move the canvas origin to the center of the new
