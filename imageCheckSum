using System;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;

class Program
{
    static void Main()
    {
        string filePath = "path/to/your/image.jpg"; // Replace with your image file path
        string sha256ChecksumBase64 = CalculateSHA256ChecksumOfPixels(filePath);
        Console.WriteLine($"SHA-256 Checksum of Pixel Data (Base64): {sha256ChecksumBase64}");
    }

    static string CalculateSHA256ChecksumOfPixels(string filePath)
    {
        // Load the image and get the pixel data
        using (Bitmap bitmap = new Bitmap(filePath))
        {
            byte[] pixelData = GetPixelData(bitmap);
            
            // Compute the SHA-256 hash of the pixel data
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(pixelData);

                // Convert the byte array to a Base64 string
                string base64String = Convert.ToBase64String(hashBytes);
                return base64String;
            }
        }
    }

    static byte[] GetPixelData(Bitmap bitmap)
    {
        int width = bitmap.Width;
        int height = bitmap.Height;
        int bytesPerPixel = Image.GetPixelFormatSize(bitmap.PixelFormat) / 8;

        byte[] pixelData = new byte[width * height * bytesPerPixel];

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                Color pixelColor = bitmap.GetPixel(x, y);
                int index = (y * width + x) * bytesPerPixel;

                pixelData[index] = pixelColor.R;
                pixelData[index + 1] = pixelColor.G;
                pixelData[index + 2] = pixelColor.B;
                if (bytesPerPixel == 4) // if the image has an alpha channel
                {
                    pixelData[index + 3] = pixelColor.A;
                }
            }
        }

        return pixelData;
    }

   static byte[] Get8BitPixelData(Bitmap bitmap)
    {
        int width = bitmap.Width;
        int height = bitmap.Height;

        // Lock the bitmap data
        BitmapData bmpData = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
        
        // Get the stride (number of bytes per scanline)
        int stride = bmpData.Stride;

        // Create a byte array to hold the pixel data
        byte[] pixelData = new byte[height * stride];

        // Copy the bitmap data to the byte array
        IntPtr ptr = bmpData.Scan0;
        System.Runtime.InteropServices.Marshal.Copy(ptr, pixelData, 0, pixelData.Length);

        // Unlock the bitmap data
        bitmap.UnlockBits(bmpData);

        return pixelData;
    }
}
